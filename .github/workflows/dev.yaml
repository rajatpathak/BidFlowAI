name: BidFlowAI Pipeline

on:
  push:
    branches:
      - production
env:
  KEY_NAME: "BidFlowAI" 

jobs:
  build:
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
 
      - name: Install Dependencies
        run: |
          npm install
 
      - name: Build Project
        run: |
          npm run build
  deploy:
    runs-on: ubuntu-latest
    environment: production >==< .195
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Migrations via SSH
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /var/www/html/${{ env.FILE_PATH }}
            eval "$(ssh-agent -s)"
            ssh-add ~/.ssh/${{ env.KEY_NAME }}  
            git config --global --add safe.directory /var/www/html/${{ env.FILE_PATH }}
            git fetch --all
            git reset --hard origin/develop
            rm -rf package-lock.json
            rm -rf node_modules
            cp .env.example .env
            sed -i '/^DATABASE_URL=/d' .env  # Delete existing line
            echo 'DATABASE_URL="'"${{ secrets.DATABASE_URL }}"'"' >> .env 
            # sed -i 's/^DEV_DB_HOST\s*=\s*.*/DEV_DB_HOST = "${{ secrets.DB_HOST }}"/' .env
            # sed -i 's/^DEV_DB_NAME\s*=\s*.*/DEV_DB_NAME = "${{ secrets.DB_DATABASE }}"/' .env
            # sed -i 's/^DEV_DB_USERNAME\s*=\s*.*/DEV_DB_USERNAME = "${{ secrets.DB_USERNAME }}"/' .env
            # sed -i 's/^DEV_DB_PASSWORD\s*=\s*.*/DEV_DB_PASSWORD = "${{ secrets.DB_PASSWORD }}"/' .env
            npm install
            npm run build
            #pm2 restart ecosystem.config.js
            #pm2 save


  notify-teams:
    runs-on: ubuntu-latest
    needs: 
      - build
      - deploy
    if: always() 
    steps:
      - name: Set Color and Message for Success
        if: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' }}
        run: |
          echo "COLOR=success" >> $GITHUB_ENV
          echo "MESSAGE=✅ Pipeline succeeded for repository ${{ github.repository }}!" >> $GITHUB_ENV

      - name: Set Color and Message for Failure
        if: ${{ needs.build.result != 'success' || needs.deploy.result != 'success' }}
        run: |
          echo "COLOR=failure" >> $GITHUB_ENV
          echo "MESSAGE=❌ Pipeline failed for repository ${{ github.repository }}!" >> $GITHUB_ENV

      - name: Send Notification to Teams
        uses: mikesprague/teams-incoming-webhook-action@v1.13.5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          webhook-url: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: "Pipeline Notification for ${{ github.repository }}"
          message: ${{ env.MESSAGE }}
          deploy-card: true
          color: ${{ env.COLOR }}
